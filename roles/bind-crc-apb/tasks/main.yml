---
- name: Retrieve {{ _apb_provision_creds.SERVICE_NAME }} configuration
  shell: >
    oc get configmaps/{{ crc_svc_config_alias }}
    -n {{ namespace }}
    -o jsonpath='{.data.config}'
  register: svc_json_str_config

- name: Validate CRC JSON config
  set_fact: svc_json_config={{ svc_json_str_config.stdout | from_json }}
  register: crc_json_config_valid
  ignore_errors: True

- block:
  - asb_last_operation:
      description: "config was not valid json. Could not bind"

  - lineinfile:
      line: 'config was not valid json. Could not bind'
      path: '{{ crc_term_msg_filepath }}'
      unsafe_writes: true

  - fail:
      msg: "config was not valid json. Could not bind"
  when: crc_json_config_valid.failed

- name: Creating CRC {{ CLIENT_ID }} secret
  k8s_v1_secret:
    name: '{{ crc_client_config_alias }}'
    namespace: '{{ namespace }}'
    annotations:
      configType: '{{ crc_svc_config_type }}'
    labels:
      name: '{{ _apb_provision_creds.SERVICE_NAME }}'
      mobile: '{{ crc_svc_label_mobile }}'
      serviceName: '{{ crc_svc_name }}'
      serviceInstanceID: '{{ _apb_service_instance_id }}'
      clientId: '{{ CLIENT_ID }}'
      mobile-client: '{{ crc_svc_label_mobile }}'
    string_data:
      type: '{{ crc_svc_type }}'
      name: '{{ _apb_provision_creds.SERVICE_NAME }}'
      uri: '{{ _apb_provision_creds.SERVICE_URI }}'
      config: '{{ svc_json_config | to_nice_json }}'

- name: Encode {{ CLIENT_ID }} APB bind credentials
  asb_encode_binding:
    fields:
      CLIENT_ID: "{{ CLIENT_ID }}"
  when: encode_asb_binding

- name: Populate {{ CLIENT_ID }} APB bind credentials
  set_fact:
    _apb_bind_creds: "{{ _apb_bind_creds|default({}) | combine( {item.name: item.value} ) }}"
  with_items:
    - {name: CLIENT_ID, value: '{{ CLIENT_ID }}'}
  when: not encode_asb_binding
  no_log: yes
